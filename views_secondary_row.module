<?php

/**
 * Implements hook_views_api().
 */
function views_secondary_row_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_views_plugins
 */
function views_secondary_row_views_plugins() {
  $plugins = array(
    'style' => array(
      'break_row' => array(
        'title' => t('Table with secondary rows'),
        'help' => t('Allows table rows to be breaken up into two.'),
        'handler' => 'views_secondary_row_plugin_style_table',
        'theme' => 'views_view_table',
        'uses row plugin' => FALSE,
        'uses row class' => TRUE,
        'uses fields' => TRUE,
        'uses options' => TRUE,
        'type' => 'normal',
      ),
    ),
  );
  return $plugins;
}

/**
 * Implements hook_theme().
 */
function views_secondary_row_theme() {
  $theme_info = array(
    'views_secondary_row_style_plugin_table' => array(
      'render element' => 'form',
    ),
  );
  return $theme_info;
}

/**
 * Theme the admin form for the table style plugin
 */
function theme_views_secondary_row_style_plugin_table($variables) {
  $form = $variables['form'];

  $output = drupal_render($form['description_markup']);

  $header = array(
    t('Field'),
    t('Column'),
    t('Align'),
    t('Separator'),
    array(
      'data' => t('Secondary row'),
      'align' => 'center',
    ),
    array(
      'data' => t('Sortable'),
      'align' => 'center',
    ),
    array(
      'data' => t('Default order'),
      'align' => 'center',
    ),
    array(
      'data' => t('Default sort'),
      'align' => 'center',
    ),
  );
  $rows = array();
  foreach (element_children($form['columns']) as $id) {
    $row = array();
    $row[] = drupal_render($form['info'][$id]['name']);
    $row[] = drupal_render($form['columns'][$id]);
    $row[] = drupal_render($form['info'][$id]['align']);
    $row[] = drupal_render($form['info'][$id]['separator']);
    $row[] = drupal_render($form['info'][$id]['break']);
    if (!empty($form['info'][$id]['sortable'])) {
      $row[] = array(
        'data' => drupal_render($form['info'][$id]['sortable']),
        'align' => 'center',
      );
      $row[] = array(
        'data' => drupal_render($form['info'][$id]['default_sort_order']),
        'align' => 'center',
      );
      $row[] = array(
        'data' => drupal_render($form['default'][$id]),
        'align' => 'center',
      );
    }
    else {
      $row[] = '';
      $row[] = '';
      $row[] = '';
    }
    $rows[] = $row;
  }

  // Add the special 'None' row.
  $rows[] = array(t('None'), '', '', '', '', '', '', array('align' => 'center', 'data' => drupal_render($form['default'][-1])));

  $output .= theme('table', array('header' => $header, 'rows' => $rows));
  $output .= drupal_render_children($form);
  return $output;
}

/**
 * Display a view as a table style.
 */
function views_secondary_row_preprocess_views_view_table(&$vars) {
  $view = $vars['view'];
  $options  = $view->style_plugin->options;
  $handler  = $view->style_plugin;
  $fields   = &$view->field;
  $active   = !empty($handler->active) ? $handler->active : '';
  $order    = !empty($handler->order) ? $handler->order : 'asc';

  $has_secondary_row = FALSE;
  foreach ($options['info'] as $field => $field_options) {
    if (!empty($field_options['break'])) {
      $has_secondary_row = TRUE;
    }
  }
  // This is an ordinary table, no need to do anything else.
  if (!$has_secondary_row) {
    return;
  }

  // Reset the header and rows, so that the module can do its own thing.
  $result = $vars['result'] = $vars['rows'];
  $vars['header'] = array();
  $vars['rows'] = array();
  $vars['field_classes'] = array();
  $vars['field_attributes'] = array();

  $header = array();
  $columns  = $handler->sanitize_columns($options['columns'], $fields);

  // Fields must be rendered in order as of Views 2.3, so we will pre-render
  // everything.
  $renders = $handler->render_fields($result);

  foreach ($columns as $field => $column) {
    // render the header labels. Skip the ones that are broken into the secondary row.
    if ($field == $column && empty($fields[$field]->options['exclude']) && empty($options['info'][$field]['break'])) {
      $label = check_plain(!empty($fields[$field]) ? $fields[$field]->label() : '');
      if (empty($options['info'][$field]['sortable']) || !$fields[$field]->click_sortable()) {
        $vars['header'][$field] = $label;
      }
      else {
        $initial = !empty($options['info'][$field]['default_sort_order']) ? $options['info'][$field]['default_sort_order'] : 'asc';

        if ($active == $field) {
          $initial = ($order == 'asc') ? 'desc' : 'asc';
        }

        $title = t('sort by @s', array('@s' => $label));
        if ($active == $field) {
          $label .= theme('tablesort_indicator', array('style' => $initial));
        }

        $query['order'] = $field;
        $query['sort'] = $initial;
        $link_options = array(
          'html' => TRUE,
          'attributes' => array('title' => $title),
          'query' => $query,
        );
        $vars['header'][$field] = l($label, $_GET['q'], $link_options);
      }

      $vars['header_classes'][$field] = '';
      // Set up the header label class.
      if ($fields[$field]->options['element_default_classes']) {
        $vars['header_classes'][$field] .= "views-field views-field-" . $vars['fields'][$field];
      }
      $class = $fields[$field]->element_label_classes(0);
      if ($class) {
        if ($vars['header_classes'][$field]) {
          $vars['header_classes'][$field] .= ' ';
        }
        $vars['header_classes'][$field] .= $class;
      }

      // Add a header label wrapper if one was selected.
      if ($vars['header'][$field]) {
        $element_label_type = $fields[$field]->element_label_type(TRUE, TRUE);
        if ($element_label_type) {
          $vars['header'][$field] = '<' . $element_label_type . '>' . $vars['header'][$field] . '</' . $element_label_type . '>';
        }
      }
    }

    foreach ($result as $num => $row) {
      // Make all rows even rows, so that there's an empty odd row between them
      // where the "secondary row" fields can be placed.
      $primary_row_num = $num * 2;
      $secondary_row_num = ($num * 2) + 1;
      $old_num = $num;
      if (!empty($options['info'][$field]['break'])) {
        $num = $secondary_row_num;
        $target_column = $options['info'][$field]['break'];
      }
      else {
        $num = $primary_row_num;
        $target_column = $column;
      }

      // Add field classes
      $vars['field_classes'][$target_column][$num] = '';
      if ($fields[$field]->options['element_default_classes']) {
        $vars['field_classes'][$target_column][$num] = "views-field views-field-" . $vars['fields'][$field];
      }
      if ($classes = $fields[$field]->element_classes($num)) {
        if ($vars['field_classes'][$target_column][$num]) {
          $vars['field_classes'][$target_column][$num] .= ' ';
        }

        $vars['field_classes'][$target_column][$num] .= $classes;
      }
      $vars['field_attributes'][$target_column][$num] = array();

      if (!empty($fields[$field]) && empty($fields[$field]->options['exclude'])) {
        $field_output = $renders[$old_num][$field];
        $element_type = $fields[$field]->element_type(TRUE, TRUE);
        if ($element_type) {
          $field_output = '<' . $element_type . '>' . $field_output . '</' . $element_type . '>';
        }

        // Don't bother with separators and stuff if the field does not show up.
        if (empty($field_output) && !empty($vars['rows'][$num][$target_column])) {
          continue;
        }

        // Place the field into the column, along with an optional separator.
        if (!empty($vars['rows'][$num][$target_column])) {
          if (!empty($options['info'][$target_column]['separator'])) {
            $vars['rows'][$num][$target_column] .= filter_xss_admin($options['info'][$target_column]['separator']);
          }
        }
        else {
          $vars['rows'][$num][$target_column] = '';
        }

        $vars['rows'][$num][$target_column] .= $field_output;
      }
    }
  }
  ksort($vars['rows']);

  // Reorder the odd rows.
  foreach ($vars['rows'] as $num => $row) {
    if ($num % 2 == 0) {
      continue;
    }

    $ordered = array();
    foreach ($columns as $field => $column) {
        if (isset($row[$column])) {
          $ordered[$column] = $row[$column];
        }
    }
    $vars['rows'][$num] = $ordered;
  }

  $count = 0;
  foreach ($vars['rows'] as $num => $row) {
    $vars['row_classes'][$num][] = ($count++ % 2 == 0) ? 'odd' : 'even';
    if ($row_class = $handler->get_row_class($num)) {
      $vars['row_classes'][$num][] = $row_class;
    }
  }

  $vars['row_classes'][0][] = 'views-row-first';
  $vars['row_classes'][count($vars['row_classes']) - 1][] = 'views-row-last';

  $vars['classes_array'] = array('views-table');
  if (empty($vars['rows']) && !empty($options['empty_table'])) {
    $vars['rows'][0][0] = $view->display_handler->render_area('empty');
    // Calculate the amounts of rows with output.
    $vars['field_attributes'][0][0]['colspan'] = count($vars['header']);
    $vars['field_classes'][0][0] = 'views-empty';
  }
}